{"version":3,"sources":["Components/navbar.js","Components/breakfast.js","Components/hamburguers.js","Components/drinks.js","Components/extra.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","class","href","react_router_dom","className","to","Breakfast","Hamburguers","Drinks","Extra","App","navbar","react_router","exact","path","render","breakfast","hamburguers","extra","drinks","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4a3049f.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom';\n\n\nconst Navbar =() => (\n\n\n    <nav>\n      <h2 class= \"logo\"><a class=\"logo-link\" href=\"#\">Menu</a></h2>\n      <ul class= \"nav-menu\">\n      <li> <Link className=\"nav-menu__link\" to=\"/\">Desayuno </Link></li>\n      <li> <Link className=\"nav-menu__link\" to=\"/hamburguers\">Hamburguesas </Link></li>\n      <li> <Link className=\"nav-menu__link\" to=\"/drinks\">Bebidas </Link></li>\n      <li> <Link className=\"nav-menu__link\" to=\"/extra\">Complementos </Link></li>\n      </ul>\n\n      <ul>\n      <li> Cantidad </li>\n      <li> Producto </li>\n      <li> Precio </li>\n      </ul>\n\n\n    </nav>\n\n);\n\nexport default Navbar;\n","import React from 'react';\n\n\nconst Breakfast=() => (\n\n    \n    <div className=\"container\">\n     <ul className= \"hamburguer-container\">\n        <td>Sandwich de jam√≥n y queso </td>\n        <td>$35</td>\n      </ul>\n      <ul className= \"hamburguer-container\">\n        <td>Jugo Natural </td>\n        <td>$15</td>\n      </ul>\n      </div>\n    \n   \n\n\n);\n\nexport default Breakfast;","import React from \"react\";\n\nconst Hamburguers=() => (\n\n    \n    <div className=\"container\">\n     <ul className= \"hamburguer-container\">\n        <td>Sencilla Res </td>\n        <td>$40</td>\n      </ul>\n      <ul className= \"hamburguer-container\">\n        <td> Doble Res </td>\n        <td>$55</td>\n      </ul>\n      </div>\n    \n   \n\n\n);\n\nexport default Hamburguers;","import React from \"react\";\n\nconst Drinks=() => (\n\n    \n    <div className=\"container\">\n     <ul className= \"hamburguer-container\">\n        <td>Refresco </td>\n        <td>$15</td>\n      </ul>\n      <ul className= \"hamburguer-container\">\n        <td>Agua </td>\n        <td>$10</td>\n      </ul>\n      </div>\n    \n   \n\n\n);\n\nexport default Drinks;","import React from \"react\";\n\nconst Extra=() => (\n\n    \n    <div className=\"container\">\n     <ul className= \"hamburguer-container\">\n        <td>Papas a la Francesa</td>\n        <td>$15</td>\n      </ul>\n      <ul className= \"hamburguer-container\">\n        <td>Aros de Cebolla</td>\n        <td>$15</td>\n      </ul>\n      </div>\n    \n   \n\n\n);\n\nexport default Extra;","import React, {Component} from 'react';\nimport {BrowserRouter,Route} from \"react-router-dom\";\nimport \"./Css/style.css\";\nimport Navbar from \"./Components/navbar\";\nimport Breakfast from \"./Components/breakfast\";\nimport Hamburguers from \"./Components/hamburguers\";\nimport Drinks from \"./Components/drinks\";\nimport Extra from \"./Components/extra\";\n\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component{\n  render () {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n    <Navbar/>\n    <Route exact path= \"/\" render={ ( )=> <Breakfast/>}/>\n    <Route path= \"/hamburguers\" render={ ( )=> <Hamburguers/>}/>\n    <Route path= \"/extra\" render={ ( )=> <Extra/>}/>\n    <Route path= \"/drinks\" render={ ( )=> <Drinks/>}/>\n    \n    {/* <Breakfast/> */}\n    </div>\n     </BrowserRouter>\n\n   \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}